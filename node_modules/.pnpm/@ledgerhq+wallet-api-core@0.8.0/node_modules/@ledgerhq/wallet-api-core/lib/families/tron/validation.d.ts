import { z } from "zod";
export declare const schemaTronOperationMode: z.ZodEnum<["send", "freeze", "unfreeze", "vote", "claimReward"]>;
export declare const schemaTronResource: z.ZodEnum<["BANDWIDTH", "ENERGY"]>;
export declare const schemaRawTronTransaction: z.ZodObject<z.extendShape<{
    amount: z.ZodString;
    recipient: z.ZodString;
}, {
    family: z.ZodLiteral<"tron">;
    mode: z.ZodEnum<["send", "freeze", "unfreeze", "vote", "claimReward"]>;
    resource: z.ZodOptional<z.ZodEnum<["BANDWIDTH", "ENERGY"]>>;
    duration: z.ZodOptional<z.ZodNumber>;
}>, "strip", z.ZodTypeAny, {
    resource?: "BANDWIDTH" | "ENERGY" | undefined;
    duration?: number | undefined;
    amount: string;
    recipient: string;
    family: "tron";
    mode: "send" | "claimReward" | "freeze" | "unfreeze" | "vote";
}, {
    resource?: "BANDWIDTH" | "ENERGY" | undefined;
    duration?: number | undefined;
    amount: string;
    recipient: string;
    family: "tron";
    mode: "send" | "claimReward" | "freeze" | "unfreeze" | "vote";
}>;
//# sourceMappingURL=validation.d.ts.map