import { z } from "zod";
export declare const schemaCurrencyType: z.ZodEnum<["CryptoCurrency", "TokenCurrency"]>;
export declare const schemaTokenStandard: z.ZodEnum<["ERC20"]>;
export declare const schemaBaseCurrency: z.ZodObject<{
    color: z.ZodString;
    ticker: z.ZodString;
    id: z.ZodString;
    name: z.ZodString;
    decimals: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    color: string;
    ticker: string;
    decimals: number;
}, {
    id: string;
    name: string;
    color: string;
    ticker: string;
    decimals: number;
}>;
export declare const schemaCryptoCurrency: z.ZodObject<z.extendShape<{
    color: z.ZodString;
    ticker: z.ZodString;
    id: z.ZodString;
    name: z.ZodString;
    decimals: z.ZodNumber;
}, {
    type: z.ZodLiteral<"CryptoCurrency">;
    family: z.ZodEnum<["bitcoin", "ethereum", "algorand", "crypto_org", "ripple", "cosmos", "ripple", "cosmos", "tezos", "polkadot", "stellar", "tron"]>;
}>, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    type: "CryptoCurrency";
    color: string;
    ticker: string;
    decimals: number;
    family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
}, {
    id: string;
    name: string;
    type: "CryptoCurrency";
    color: string;
    ticker: string;
    decimals: number;
    family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
}>;
export declare const schemaTokenCurrency: z.ZodObject<z.extendShape<{
    color: z.ZodString;
    ticker: z.ZodString;
    id: z.ZodString;
    name: z.ZodString;
    decimals: z.ZodNumber;
}, {
    type: z.ZodLiteral<"TokenCurrency">;
    parent: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    type: "TokenCurrency";
    color: string;
    ticker: string;
    decimals: number;
    parent: string;
}, {
    id: string;
    name: string;
    type: "TokenCurrency";
    color: string;
    ticker: string;
    decimals: number;
    parent: string;
}>;
export declare const schemaERC20TokenCurrency: z.ZodObject<z.extendShape<z.extendShape<{
    color: z.ZodString;
    ticker: z.ZodString;
    id: z.ZodString;
    name: z.ZodString;
    decimals: z.ZodNumber;
}, {
    type: z.ZodLiteral<"TokenCurrency">;
    parent: z.ZodString;
}>, {
    standard: z.ZodEnum<["ERC20"]>;
    contract: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    type: "TokenCurrency";
    color: string;
    ticker: string;
    decimals: number;
    parent: string;
    standard: "ERC20";
    contract: string;
}, {
    id: string;
    name: string;
    type: "TokenCurrency";
    color: string;
    ticker: string;
    decimals: number;
    parent: string;
    standard: "ERC20";
    contract: string;
}>;
export declare const schemaCurrency: z.ZodDiscriminatedUnion<"type", z.Primitive, z.ZodObject<z.extendShape<{
    color: z.ZodString;
    ticker: z.ZodString;
    id: z.ZodString;
    name: z.ZodString;
    decimals: z.ZodNumber;
}, {
    type: z.ZodLiteral<"CryptoCurrency">;
    family: z.ZodEnum<["bitcoin", "ethereum", "algorand", "crypto_org", "ripple", "cosmos", "ripple", "cosmos", "tezos", "polkadot", "stellar", "tron"]>;
}>, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    type: "CryptoCurrency";
    color: string;
    ticker: string;
    decimals: number;
    family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
}, {
    id: string;
    name: string;
    type: "CryptoCurrency";
    color: string;
    ticker: string;
    decimals: number;
    family: "bitcoin" | "ethereum" | "algorand" | "crypto_org" | "ripple" | "cosmos" | "tezos" | "polkadot" | "stellar" | "tron";
}> | z.ZodObject<z.extendShape<z.extendShape<{
    color: z.ZodString;
    ticker: z.ZodString;
    id: z.ZodString;
    name: z.ZodString;
    decimals: z.ZodNumber;
}, {
    type: z.ZodLiteral<"TokenCurrency">;
    parent: z.ZodString;
}>, {
    standard: z.ZodEnum<["ERC20"]>;
    contract: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    type: "TokenCurrency";
    color: string;
    ticker: string;
    decimals: number;
    parent: string;
    standard: "ERC20";
    contract: string;
}, {
    id: string;
    name: string;
    type: "TokenCurrency";
    color: string;
    ticker: string;
    decimals: number;
    parent: string;
    standard: "ERC20";
    contract: string;
}>>;
//# sourceMappingURL=validation.d.ts.map