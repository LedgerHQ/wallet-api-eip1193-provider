"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../logger");
const defaultLogger = new logger_1.Logger("WindowMessage");
class WindowMessageTransport {
    target;
    logger;
    _onMessage;
    constructor(target = window, logger = defaultLogger) {
        this.target = target;
        this.logger = logger;
    }
    connect = () => {
        this.target.addEventListener("message", this._onMessageEvent, false);
        // @ts-expect-error: Workaround for android webview
        this.target.document?.addEventListener("message", this._onMessageEvent, false);
        this.logger.debug("event listeners registered");
    };
    disconnect = () => {
        this.target.removeEventListener("message", this._onMessageEvent, false);
        // @ts-expect-error: Workaround for android webview
        this.target.document?.removeEventListener("message", this._onMessageEvent, false);
        this.logger.debug("event listeners unregistered");
    };
    _onMessageEvent = (event) => {
        if (this._onMessage) {
            this.logger.debug("received message event", event);
            if (event.origin !== this.target.location.origin &&
                event.data &&
                typeof event.data === "string") {
                try {
                    const message = event.data;
                    // TODO: find a better way to ensure message comes from LL
                    if (Date.now() > 0) {
                        this.logger.log("received message", message);
                        // FIXME
                        // eslint-disable-next-line @typescript-eslint/no-floating-promises
                        this._onMessage(message);
                    }
                    else {
                        this.logger.debug("not a wallet API message");
                    }
                }
                catch (error) {
                    this.logger.warn("parse error");
                    // FIXME
                    if (error instanceof Error) {
                        // eslint-disable-next-line @typescript-eslint/no-floating-promises
                        this._onMessage(error.message);
                    }
                    console.error("unknown error");
                }
            }
            else {
                this.logger.debug("ignoring message same origin");
            }
        }
        else {
            this.logger.debug("no handler registered");
        }
    };
    set onMessage(handler) {
        this._onMessage = handler;
    }
    get onMessage() {
        return this._onMessage;
    }
    send = (message) => {
        try {
            // @ts-expect-error: injected value
            if (this.target.ReactNativeWebView) {
                this.logger.log("sending message (ReactNativeWebview)", message);
                // @ts-expect-error: injected value
                this.target.ReactNativeWebView.postMessage(message);
            }
            // @ts-expect-error: injected value
            else if (this.target.ElectronWebview) {
                this.logger.log("sending message (ElectronWebview)", message);
                // @ts-expect-error: injected value
                this.target.ElectronWebview.postMessage(message);
            }
            else {
                this.logger.log("sending message", message);
                this.target.top?.postMessage(message, "*");
            }
            return Promise.resolve();
        }
        catch (error) {
            this.logger.error("unexpected error on send", error);
            return Promise.reject(error);
        }
    };
}
exports.default = WindowMessageTransport;
