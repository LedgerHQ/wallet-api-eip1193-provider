import { z } from "zod";
declare const schemaDeviceExchangeParams: z.ZodObject<{
    apduHex: z.ZodString;
    transportId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transportId: string;
    apduHex: string;
}, {
    transportId: string;
    apduHex: string;
}>;
declare const schemaDeviceExchangeResults: z.ZodObject<{
    responseHex: z.ZodString;
}, "strip", z.ZodTypeAny, {
    responseHex: string;
}, {
    responseHex: string;
}>;
export declare const schemaDeviceExchange: {
    params: z.ZodObject<{
        apduHex: z.ZodString;
        transportId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transportId: string;
        apduHex: string;
    }, {
        transportId: string;
        apduHex: string;
    }>;
    result: z.ZodObject<{
        responseHex: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        responseHex: string;
    }, {
        responseHex: string;
    }>;
};
export declare type DeviceExchange = {
    params: z.infer<typeof schemaDeviceExchangeParams>;
    result: z.infer<typeof schemaDeviceExchangeResults>;
};
export declare type DeviceExchangeHandler = (params: DeviceExchange["params"]) => DeviceExchange["result"];
export {};
//# sourceMappingURL=DeviceExchange.d.ts.map