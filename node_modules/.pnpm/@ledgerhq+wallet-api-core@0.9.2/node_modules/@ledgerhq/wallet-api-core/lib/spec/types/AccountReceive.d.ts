import { z } from "zod";
declare const schemaAccountReceiveParams: z.ZodObject<{
    accountId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    accountId: string;
}, {
    accountId: string;
}>;
declare const schemaAccountReceiveResults: z.ZodObject<{
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
}, {
    address: string;
}>;
export declare const schemaAccountReceive: {
    params: z.ZodObject<{
        accountId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        accountId: string;
    }, {
        accountId: string;
    }>;
    result: z.ZodObject<{
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
    }, {
        address: string;
    }>;
};
export declare type AccountReceive = {
    params: z.infer<typeof schemaAccountReceiveParams>;
    result: z.infer<typeof schemaAccountReceiveResults>;
};
export declare type AccountReceiveHandler = (params: AccountReceive["params"]) => AccountReceive["result"];
export {};
//# sourceMappingURL=AccountReceive.d.ts.map