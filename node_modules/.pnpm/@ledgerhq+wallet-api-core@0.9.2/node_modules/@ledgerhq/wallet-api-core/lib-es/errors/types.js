import { z } from "zod";
/*
    This file define all the "app level" errors, feel free to define new errors
    as we add new features to the Wallet API
*/
export const schemaServerErrorCode = z.enum([
    "NOT_IMPLEMENTED_BY_WALLET",
    "ACCOUNT_NOT_FOUND",
    "CURRENCY_NOT_FOUND",
    "PERMISSION_DENIED",
    "UNKNOWN_ERROR",
]);
/*
    NOT_IMPLEMENTED_BY_WALLET
*/
export const schemaNotImplementedByWallet = z.object({
    code: z.literal(schemaServerErrorCode.enum.NOT_IMPLEMENTED_BY_WALLET),
    message: z.string(),
    data: z.object({
        methodId: z.string(),
    }),
});
/*
    ACCOUNT_NOT_FOUND
*/
export const schemaAccountNotFound = z.object({
    code: z.literal(schemaServerErrorCode.enum.ACCOUNT_NOT_FOUND),
    message: z.string(),
    data: z.object({
        accountId: z.string(),
    }),
});
/*
    CURRENCY_NOT_FOUND
*/
export const schemaCurrencyNotFound = z.object({
    code: z.literal(schemaServerErrorCode.enum.CURRENCY_NOT_FOUND),
    message: z.string(),
    data: z.object({
        currencyId: z.string(),
    }),
});
/*
    PERMISSION_DENIED
*/
export const schemaPermissionDenied = z.object({
    code: z.literal(schemaServerErrorCode.enum.PERMISSION_DENIED),
    message: z.string(),
    data: z.object({
        methodId: z.string(),
    }),
});
/*
    UNKNOWN_ERROR
*/
export const schemaUnknownError = z.object({
    code: z.literal(schemaServerErrorCode.enum.UNKNOWN_ERROR),
    message: z.string(),
    data: z.object({
        name: z.string().optional(),
        message: z.string().optional(),
        stack: z.string().optional(),
        cause: z.unknown().optional(),
        code: z.string().optional(),
    }),
});
export const schemaServerErrorData = z.discriminatedUnion("code", [
    schemaNotImplementedByWallet,
    schemaAccountNotFound,
    schemaCurrencyNotFound,
    schemaPermissionDenied,
    schemaUnknownError,
]);
