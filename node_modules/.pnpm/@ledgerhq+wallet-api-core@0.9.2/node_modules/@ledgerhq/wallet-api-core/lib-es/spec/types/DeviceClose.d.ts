import { z } from "zod";
declare const schemaDeviceCloseParams: z.ZodObject<{
    transportId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transportId: string;
}, {
    transportId: string;
}>;
declare const schemaDeviceCloseResults: z.ZodObject<{
    transportId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transportId: string;
}, {
    transportId: string;
}>;
export declare const schemaDeviceClose: {
    params: z.ZodObject<{
        transportId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transportId: string;
    }, {
        transportId: string;
    }>;
    result: z.ZodObject<{
        transportId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transportId: string;
    }, {
        transportId: string;
    }>;
};
export declare type DeviceClose = {
    params: z.infer<typeof schemaDeviceCloseParams>;
    result: z.infer<typeof schemaDeviceCloseResults>;
};
export declare type DeviceCloseHandler = (params: DeviceClose["params"]) => DeviceClose["result"];
export {};
//# sourceMappingURL=DeviceClose.d.ts.map