/// <reference types="node" />
import Transport from "@ledgerhq/hw-transport";
import type { WalletAPIClient } from "./WalletAPIClient";
/**
 * Wallet API Transport implementation
 */
export declare class TransportWalletAPI extends Transport {
    walletApi: WalletAPIClient;
    transportId: string;
    constructor(walletApi: WalletAPIClient, transportId: string);
    /**
     * Check if Wallet API transport is supported.
     */
    static isSupported: () => Promise<boolean>;
    /**
     * This transport is not discoverable
     */
    static list: () => Promise<never[]>;
    static listen: (_observer: unknown) => {
        unsubscribe: () => void;
    };
    /**
     * Create a Ledger transport with the Wallet API transport
     */
    static open({ walletApi, transportId, }: {
        walletApi: WalletAPIClient;
        transportId: string;
    }): Promise<Transport>;
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     * @throws {@link RpcError} if an error occured on server side
     */
    exchange(apdu: Buffer): Promise<Buffer>;
    setScrambleKey(): void;
    /**
     * Close the current transport communication.
     *
     * @throws {@link RpcError} if an error occured on server side
     */
    close(): Promise<void>;
}
//# sourceMappingURL=TransportWalletAPI.d.ts.map