import Transport from "@ledgerhq/hw-transport";
import { schemaDeviceClose, schemaDeviceExchange, } from "@ledgerhq/wallet-api-core";
/**
 * Wallet API Transport implementation
 */
export class TransportWalletAPI extends Transport {
    walletApi;
    transportId;
    constructor(walletApi, transportId) {
        super();
        this.transportId = transportId;
        this.walletApi = walletApi;
    }
    /**
     * Check if Wallet API transport is supported.
     */
    static isSupported = () => Promise.resolve(true);
    /**
     * This transport is not discoverable
     */
    static list = () => Promise.resolve([]);
    static listen = (_observer) => ({
        unsubscribe: () => { },
    });
    /**
     * Create a Ledger transport with the Wallet API transport
     */
    static open({ walletApi, transportId, }) {
        return Promise.resolve(new TransportWalletAPI(walletApi, transportId));
    }
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     * @throws {@link RpcError} if an error occured on server side
     */
    async exchange(apdu) {
        const apduHex = apdu.toString("hex");
        const deviceExchangeResult = await this.walletApi.request("device.exchange", {
            transportId: this.transportId,
            apduHex,
        });
        const safeResults = schemaDeviceExchange.result.parse(deviceExchangeResult);
        return Buffer.from(safeResults.responseHex, "hex");
    }
    // eslint-disable-next-line class-methods-use-this
    setScrambleKey() { }
    /**
     * Close the current transport communication.
     *
     * @throws {@link RpcError} if an error occured on server side
     */
    async close() {
        const deviceCloseResult = await this.walletApi.request("device.close", {
            transportId: this.transportId,
        });
        schemaDeviceClose.result.parse(deviceCloseResult);
        // Should we check the transportId against the one from the class
        // and throw an error in case of mismatch ?
    }
}
